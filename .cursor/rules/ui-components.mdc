---
globs: *.tsx,*.ts
---

# UI Components & Shadcn Guidelines

## Shadcn/ui Usage

- **ALWAYS** use Shadcn/ui components for UI elements
- Import components from `@/components/ui/` directory
- Use the established component patterns from [components.json](mdc:aa-nextjs/components.json)
- Follow the "new-york" style configuration
- Extend components with custom styling when needed

## Component Structure & Organization

### Base Component Usage

```typescript
// ✅ Correct - Using Shadcn components
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

// ❌ Wrong - Creating custom UI components
<div className="bg-blue-500 px-4 py-2 rounded">Button</div>;
```

### Component Composition

```typescript
// ✅ Correct - Composing Shadcn components
export function EventCard({ event }: { event: Event }) {
  return (
    <Card className="hover:shadow-lg transition-shadow">
      <CardHeader>
        <CardTitle className="text-xl">{event.title}</CardTitle>
        <CardDescription>{event.description}</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex justify-between items-center">
          <span className="text-sm text-muted-foreground">
            {formatDate(event.date)}
          </span>
          <Button size="sm">View Details</Button>
        </div>
      </CardContent>
    </Card>
  );
}
```

## Component Guidelines

### Props & TypeScript

- Use TypeScript for all component props
- Define clear interfaces for component props
- Use proper default values and optional props
- Implement proper prop validation

### Styling & Theming

- Use `cn()` utility from `@/lib/utils` for conditional classes
- Follow Tailwind CSS utility-first approach
- Leverage CSS variables for theming (configured in globals.css)
- Use the zinc base color palette with custom brand colors
- Implement dark/light mode support with next-themes

### Accessibility

- Implement proper accessibility attributes
- Use semantic HTML elements
- Ensure proper focus management
- Support keyboard navigation
- Maintain proper color contrast ratios

## Component Patterns

### Form Components

```typescript
// ✅ Correct - Form component with validation
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { createEventSchema } from "@/validation/eventSchema";

export function EventForm({
  onSubmit,
}: {
  onSubmit: (data: EventFormData) => void;
}) {
  const form = useForm<EventFormData>({
    resolver: zodResolver(createEventSchema),
  });

  return (
    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
      <div>
        <Label htmlFor="title">Title</Label>
        <Input
          id="title"
          {...form.register("title")}
          className={form.formState.errors.title ? "border-destructive" : ""}
        />
        {form.formState.errors.title && (
          <p className="text-sm text-destructive">
            {form.formState.errors.title.message}
          </p>
        )}
      </div>
      <Button type="submit" disabled={form.formState.isSubmitting}>
        {form.formState.isSubmitting ? "Creating..." : "Create Event"}
      </Button>
    </form>
  );
}
```

### Layout Components

```typescript
// ✅ Correct - Layout component with theming
export function PageLayout({
  children,
  title,
  description,
}: {
  children: React.ReactNode;
  title: string;
  description?: string;
}) {
  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-foreground">{title}</h1>
          {description && (
            <p className="text-muted-foreground mt-2">{description}</p>
          )}
        </div>
        {children}
      </div>
    </div>
  );
}
```

### Interactive Components

```typescript
// ✅ Correct - Interactive component with state
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";

export function ToggleCard({ children }: { children: React.ReactNode }) {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <Card>
      <CardContent className="p-4">
        <Button
          variant="ghost"
          onClick={() => setIsOpen(!isOpen)}
          className="w-full justify-between"
        >
          <span>Toggle Content</span>
          <span className={cn("transition-transform", isOpen && "rotate-180")}>
            ▼
          </span>
        </Button>
        {isOpen && <div className="mt-4 pt-4 border-t">{children}</div>}
      </CardContent>
    </Card>
  );
}
```

## Icons & Assets

### Icon Usage

- Use Lucide React icons (configured in components.json)
- Import icons individually to optimize bundle size
- Use consistent icon sizes and styling
- Implement proper icon accessibility

```typescript
// ✅ Correct - Icon usage
import { Calendar, User, Settings } from "lucide-react";

<Button>
  <Calendar className="mr-2 h-4 w-4" />
  Create Event
</Button>;
```

### Image Handling

- Use NextJS Image component for optimized images
- Implement proper alt text for accessibility
- Use appropriate image sizes and formats
- Implement lazy loading for performance

## Component Testing

### Testing Patterns

- Test component rendering and behavior
- Test user interactions and state changes
- Test accessibility features
- Mock external dependencies appropriately

### Test Structure

```typescript
// ✅ Correct - Component test
import { render, screen, fireEvent } from "@testing-library/react";
import { EventCard } from "./EventCard";

describe("EventCard", () => {
  it("renders event information correctly", () => {
    const mockEvent = {
      id: "1",
      title: "Test Event",
      description: "Test Description",
      date: new Date(),
    };

    render(<EventCard event={mockEvent} />);

    expect(screen.getByText("Test Event")).toBeInTheDocument();
    expect(screen.getByText("Test Description")).toBeInTheDocument();
  });

  it("handles click events", () => {
    const mockEvent = {
      /* ... */
    };
    const onViewDetails = jest.fn();

    render(<EventCard event={mockEvent} onViewDetails={onViewDetails} />);

    fireEvent.click(screen.getByText("View Details"));
    expect(onViewDetails).toHaveBeenCalledWith(mockEvent.id);
  });
});
```
